{"version":3,"sources":["reducers/app-reducer.ts","api/api.ts","reducers/dummy-reducer.ts","App.tsx","store.ts","index.tsx"],"names":["initialState","status","error","setAppErrorAC","type","setAppStatusAC","instance","axios","create","baseURL","dummyAPI","get","data","App","dispatch","useDispatch","useSelector","state","app","dummy","useEffect","a","then","res","catch","message","style","position","top","textAlign","width","CircularProgress","map","el","Table","Typography","variant","id","TableCell","TableRow","employee_name","employee_salary","employee_age","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"sMACMA,EAAiC,CACnCC,OAAQ,OACRC,MAAO,MAyBEC,EAAgB,SAACD,GAAD,MAA2B,CAACE,KAAM,gBAAiBF,UACnEG,EAAiB,SAACJ,GAAD,MAAgC,CAACG,KAAM,iBAAkBH,W,QClBjFK,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,4CAKAC,EAAW,WAGhB,OADgBJ,EAASK,IAAsB,cCdjDX,EAAe,CACjBC,OAAQ,GACPW,KAAM,I,+CCmDIC,MAlDf,WACI,IAAMC,EAAWC,cACXd,EAASe,aAAiD,SAACC,GAAD,OAAWA,EAAMC,IAAIjB,UAC/EW,EAAOI,aAAmC,SAAAC,GAAK,OAAIA,EAAME,MAAMP,QAQrE,OALAQ,qBAAU,WACNN,EDekB,uCAAM,WAAOA,GAAP,SAAAO,EAAA,6DAC5BP,EAAST,EAAe,YADI,SAErBK,IACFY,MAAK,SAACC,GACHT,EAR2C,CAACV,KAAM,gBAAiBQ,KAQ/CW,EAAIX,OACzBE,EAAST,EAAe,iBACxBmB,OAAM,SAACtB,GACNY,EAASX,EAAcD,EAAMuB,QAAUvB,EAAMuB,QAAU,wBACvDX,EAAST,EAAe,cARJ,2CAAN,yDCdnB,IAGY,YAAXJ,EACO,qBACHyB,MAAO,CAACC,SAAU,QAASC,IAAK,MAAOC,UAAW,SAAUC,MAAO,QADhE,SAEH,cAACC,EAAA,EAAD,MAKJ,8BACKnB,EAAKoB,KAAI,SAACC,GACP,OAEI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,qBAEOH,EAAGI,GACN,eAACC,EAAA,EAAD,WACA,eAACC,EAAA,EAAD,6BACmB,8BAAIN,EAAGO,cAAP,UAEnB,eAACD,EAAA,EAAD,+BACqB,4BAAIN,EAAGQ,qBAE5B,eAACF,EAAA,EAAD,4BACkB,4BAAIN,EAAGS,yBAZrBT,EAAGI,U,gBCvB7BM,EAAcC,YAAgB,CAC/BzB,MFCuB,WAAoF,IAAnFF,EAAkF,uDAAxDjB,EAAc6C,EAA0C,uCAC3G,OAAQA,EAAOzC,MACX,IAAK,gBACD,OAAO,2BACAa,GADP,IAEIhB,OAAQ4C,EAAOjC,KAAKX,OACpBW,KAAMiC,EAAOjC,KAAKA,OAI1B,QACI,OAAOK,IEXdC,IJHqB,WAAoF,IAAnFD,EAAkF,uDAAxDjB,EAAc6C,EAA0C,uCACzG,OAAQA,EAAOzC,MACX,IAAK,iBACD,OAAO,2BAAIa,GAAX,IAAkBhB,OAAQ4C,EAAO5C,SACrC,IAAK,gBACD,OAAO,2BAAIgB,GAAX,IAAkBf,MAAO2C,EAAO3C,QAEpC,QACI,OAAO,eAAIe,OIDV6B,EAAQC,YAAYJ,EAAaK,YAAgBC,MCP9DC,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACA,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.8c3cf345.chunk.js","sourcesContent":["\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // is there any interaction with the server now\r\n    status: RequestStatusType\r\n    // if a global error occurs, we will write the error text here\r\n    error: string | null\r\n\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n\r\n","import axios from 'axios'\r\n\r\n\r\n// const settings = {\r\n//     withCredentials: true,\r\n//     headers: {\r\n//\r\n//     }\r\n// }\r\n\r\n// Create instance\r\nconst instance = axios.create({\r\n    baseURL: 'http://dummy.restapiexample.com/api/v1/',\r\n    // ...settings\r\n})\r\n\r\n// API\r\nexport const dummyAPI = {\r\n    getEmployees() {\r\n        const promise = instance.get<ResponseDataType>('employees');\r\n        return promise;\r\n    }\r\n}\r\n\r\n// types\r\nexport type ResponseEmployeesType = {\r\n    \"id\": string\r\n    \"employee_name\": string\r\n    \"employee_salary\": string\r\n    \"employee_age\": string\r\n    \"profile_image\": string\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    \"status\": string\r\n    \"data\": ResponseEmployeesType[]\r\n\r\n}\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {dummyAPI, ResponseDataType} from \"../api/api\";\r\n\r\n\r\nconst initialState = {\r\n    status: '',\r\n     data: []\r\n}\r\n\r\nexport const dummyReducer = (state: ResponseDataType = initialState, action: ActionsType): ResponseDataType => {\r\n    switch (action.type) {\r\n        case 'GET_EMPLOYEES': {\r\n            return {\r\n                ...state,\r\n                status: action.data.status,\r\n                data: action.data.data\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const getDummyAC = (data: ResponseDataType) => ({type: 'GET_EMPLOYEES', data} as const);\r\n\r\n\r\n// thunks\r\nexport const getDummyTC = () => async (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n     await dummyAPI.getEmployees()\r\n        .then((res) => {\r\n            dispatch(getDummyAC(res.data))\r\n           dispatch(setAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n            dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionsType =\r\n    | ReturnType<typeof getDummyAC>\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n\r\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getDummyTC} from \"./reducers/dummy-reducer\";\nimport {AppRootStateType} from \"./store\";\nimport {RequestStatusType} from \"./reducers/app-reducer\";\nimport {CircularProgress, TableCell, TableRow, Table} from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\n\nfunction App() {\n    const dispatch = useDispatch()\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n    const data = useSelector<AppRootStateType, any>(state => state.dummy.data)\n\n\n    useEffect(() => {\n        dispatch(getDummyTC())\n    }, [])\n\n\n    if (status === 'loading') {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div>\n            {data.map((el: any) => {\n                return (\n\n                    <Table key={el.id}  >\n                        <Typography variant=\"h6\">\n\n                           â„–: {el.id}\n                            <TableCell>\n                            <TableRow >\n                                Employee name: <b>{el.employee_name} </b>\n                            </TableRow>\n                            <TableRow>\n                                Employee salary: <b>{el.employee_salary}</b>\n                            </TableRow>\n                            <TableRow>\n                                Employee age: <b>{el.employee_age}</b>\n                            </TableRow>\n                            </TableCell>\n                        </Typography>\n                    </Table>\n\n                )\n            })}\n\n        </div>\n\n    );\n}\n\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {dummyReducer} from \"./reducers/dummy-reducer\";\r\n\r\n\r\n// combine reducers with combineReducers,\r\n// we set the structure of our only state object\r\nconst rootReducer = combineReducers({\r\n     dummy: dummyReducer,\r\n     app: appReducer\r\n})\r\n\r\n// create store directly\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// automatically determine the type of the entire state object\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}